{"version":3,"sources":["assets\\src\\utils\\NextWebSocket.ts"],"names":[],"mappings":";;;;;;;AAAA;IAGI;QAFQ,gBAAW,GAAmB,IAAI,CAAC;QACnC,OAAE,GAAc,IAAI,CAAC;QAEzB,IAAI,CAAC,WAAW,GAAG,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;IAC5C,CAAC;IAEM,8BAAM,GAAb;QACI,OAAO,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,KAAK,SAAS,CAAC,IAAI,CAAA;IAC3D,CAAC;IAEM,+BAAO,GAAd,UAAe,aAAqB,EAAE,KAAc;QAApD,iBAuBC;QAtBG,IAAI,IAAI,GAAG,aAAa,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,YAAU,KAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAC5D,IAAI,CAAC,EAAE,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,EAAE,CAAC,MAAM,GAAG,UAAA,KAAK;YAClB,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACf,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC,CAAC;QACF,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,UAAA,KAAK;YACrB,QAAQ;YACJ,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAClC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACf,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACb,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;gBACzB,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;aAChD;YACL,WAAW;YACX,0BAA0B;YAC1B,4BAA4B;YAC5B,IAAI;QACR,CAAC,CAAC;QACF,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,UAAA,KAAK;YACnB,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtC,CAAC,CAAC;IACN,CAAC;IAEM,4BAAI,GAAX,UAAY,IAAY,EAAE,KAAW;QACjC,IAAI,IAAI,GAAG;YACP,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,KAAK;SACf,CAAC;QACF,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC1B,CAAC;IAEM,0BAAE,GAAT,UAAU,IAAY,EAAE,EAAY,EAAE,MAAY;QAC9C,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,EAAE,UAAC,MAAM;YAC7B,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/B,CAAC,EAAE,MAAM,CAAC,CAAC;IACf,CAAC;IAEM,4BAAI,GAAX,UAAY,IAAY,EAAE,EAAY,EAAE,MAAY;QAChD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,MAAM;YAC/B,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/B,CAAC,EAAE,MAAM,CAAC,CAAC;IACf,CAAC;IAEM,iCAAS,GAAhB,UAAiB,MAAM;QACnB,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IACL,oBAAC;AAAD,CA5DA,AA4DC,IAAA;AA5DY,sCAAa","file":"","sourceRoot":"/","sourcesContent":["export class NextWebSocket {\n    private eventTarget: cc.EventTarget = null;\n    private ws: WebSocket = null;\n    public constructor() {\n        this.eventTarget = new cc.EventTarget();\n    }\n\n    public isOpen() {\n        return this.ws && this.ws.readyState === WebSocket.OPEN\n    }\n\n    public connect(serverAddress: string, token?: string) {\n        let addr = serverAddress + (token ? `?token=${token}` : \"\");\n        this.ws = new WebSocket(addr);\n        this.ws.onopen = event => {\n            cc.log(\"连接成功\");\n            this.eventTarget.emit(\"ws_open\");\n        };\n        this.ws.onmessage = event => {\n            // try {\n                let data = JSON.parse(event.data);\n                cc.log(\"获取消息\");\n                cc.log(data);\n                if (data.name && data.value) {\n                    this.eventTarget.emit(data.name, data.value);\n                }\n            // } catch{\n            //     cc.error(\"接受消息错误\");\n            //     cc.error(event.data);\n            // }\n        };\n        this.ws.onclose = event => {\n            this.eventTarget.emit(\"ws_close\");\n        };\n    }\n\n    public emit(name: string, value?: any) {\n        let data = {\n            name: name,\n            value: value\n        };\n        let jsonStr = JSON.stringify(data);\n        this.ws.send(jsonStr);\n    }\n\n    public on(name: string, cb: Function, target?: any) {\n        this.eventTarget.on(name, (detail) => {\n            cb.apply(target, [detail]);\n        }, target);\n    }\n\n    public once(name: string, cb: Function, target?: any) {\n        this.eventTarget.once(name, (detail) => {\n            cb.apply(target, [detail]);\n        }, target);\n    }\n\n    public offTarget(target) {\n        this.eventTarget.targetOff(target);\n    }\n}\n"]}